import java.util.Scanner;
/**
 * CHESS MODE ENGAGE
 * @author Will Mandrola, wmandrol@purdue.edu
 */
public class Chess {
    private char[][] board;
    private boolean isWhiteTurn;
    private boolean whiteCanCastle;
    private boolean blackCanCastle;
    private boolean a1RookMoved;
    private boolean h1RookMoved;
    private boolean a8RookMoved;
    private boolean h8RookMoved;

    public Chess() {
        this.board = new char[8][8];
        this.isWhiteTurn = true;
        this.whiteCanCastle = true;
        this.blackCanCastle = true;
        this.a1RookMoved = false;
        this.h1RookMoved = false;
        this.a8RookMoved = false;
        this.h8RookMoved = false;
    }

    public char getSquare(int x, int y) {
        return board[x][y];
    }

    public boolean isWhiteTurn() {
        return isWhiteTurn;
    }

    public void changeTurn() {
        if (isWhiteTurn)
            isWhiteTurn = false;
        else
            isWhiteTurn = true;
    }

    public void setBoard() {
        board[0][0] = 'r';
        board[0][1] = 'n';
        board[0][2] = 'b';
        board[0][3] = 'q';
        board[0][4] = 'k';
        board[0][5] = 'b';
        board[0][6] = 'n';
        board[0][7] = 'r';
        for (int i = 0; i < 8; i++) {
            board[1][i] = 'p';
        }
        for (int i = 2; i < 6; i++) {
            for (int j = 0; j < 8; j++) {
                board[i][j] = '.';
            }
        }
        for (int i = 0; i < 8; i++) {
            board[6][i] = 'P';
        }
        board[7][0] = 'R';
        board[7][1] = 'N';
        board[7][2] = 'B';
        board[7][3] = 'Q';
        board[7][4] = 'K';
        board[7][5] = 'B';
        board[7][6] = 'N';
        board[7][7] = 'R';
        isWhiteTurn = true;
    }

    public void printBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(board[i][j]);
                System.out.print(" ");
            }
            System.out.print("\n");
        }
    }

    public int[] parseSquare(String input) {
        int[] retValues = new int[2];
        if (input.length() != 2) {
            retValues[0] = -1;
            retValues[1] = -1;
            return retValues;
        }
        char file = input.charAt(0);
        switch (file) {
            case 'a':
                retValues[1] = 0;
                break;
            case 'b':
                retValues[1] = 1;
                break;
            case 'c':
                retValues[1] = 2;
                break;
            case 'd':
                retValues[1] = 3;
                break;
            case 'e':
                retValues[1] = 4;
                break;
            case 'f':
                retValues[1] = 5;
                break;
            case 'g':
                retValues[1] = 6;
                break;
            case 'h':
                retValues[1] = 7;
                break;
            default:
                retValues[1] = -1;
        }
        char rank = input.charAt(1);
        switch (rank) {
            case '1':
                retValues[0] = 7;
                break;
            case '2':
                retValues[0] = 6;
                break;
            case '3':
                retValues[0] = 5;
                break;
            case '4':
                retValues[0] = 4;
                break;
            case '5':
                retValues[0] = 3;
                break;
            case '6':
                retValues[0] = 2;
                break;
            case '7':
                retValues[0] = 1;
                break;
            case '8':
                retValues[0] = 0;
                break;
            default:
                retValues[0] = -1;
        }
        return retValues;
    }
    public boolean isValidPiece(int x, int y) {
        if (!Character.isLetter(board[x][y]))
            return false;
        if (isWhiteTurn) {
            return (Character.isUpperCase(board[x][y]));
        }
        else {
            return (Character.isLowerCase(board[x][y]));
        }
    }
    public boolean isValidMove(int xStart, int yStart, int xEnd, int yEnd, char piece) {
        if (xStart == xEnd && yStart == yEnd)
            return false;

        int xDiff;
        int yDiff;

        switch (piece) {
            //white king
            case 'K':
                if (Math.abs(xStart - xEnd) <= 1 && Math.abs(yStart - yEnd) <= 1 && (board[xEnd][yEnd] == '.' ||
                Character.isLowerCase(board[xEnd][yEnd]))) {
                    return true;
                }
                else {
                    if (xStart == xEnd && Math.abs(yStart - yEnd) == 2) {
                        if (!whiteCanCastle)
                            return false;
                        if (yEnd == 2) {
                            if (a1RookMoved)
                                return false;
                            for (int i = 3; i > 0; i--) {
                                if (board[7][i] != '.')
                                    return false;
                            }
                            whiteCanCastle = false;
                            return true;
                        }
                        if (yEnd == 6) {
                            if (h1RookMoved)
                                return false;
                            for (int i = 5; i < 7; i++) {
                                if (board[7][i] != '.')
                                    return false;
                            }
                            return true;
                        }
                    }
                }
                break;

            //black king
            case 'k':
                if (Math.abs(xStart - xEnd) <= 1 && Math.abs(yStart - yEnd) <= 1 && (board[xEnd][yEnd] == '.' ||
                        Character.isUpperCase(board[xEnd][yEnd]))) {
                    return true;
                }
                else {
                    if (xStart == xEnd && Math.abs(yStart - yEnd) == 2) {
                        if (!blackCanCastle)
                            return false;
                        if (yEnd == 2) {
                            if (a8RookMoved)
                                return false;
                            for (int i = 3; i > 0; i--) {
                                if (board[0][i] != '.')
                                    return false;
                            }
                            blackCanCastle = false;
                            return true;
                        }
                        if (yEnd == 6) {
                            if (h8RookMoved)
                                return false;
                            for (int i = 5; i < 7; i++) {
                                if (board[0][i] != '.')
                                    return false;
                            }
                            blackCanCastle = false;
                            return true;
                        }
                    }
                }
                break;

            //queens
            case 'q':case 'Q':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;
                if (Math.abs(xDiff) != Math.abs(yDiff) && xDiff != 0 && yDiff != 0)
                    return false;

                //for moving vertically down
                if (xDiff < 0 && yDiff == 0) {
                    for (int i = xStart + 1; i <= xEnd; i++) {
                        if (board[i][yEnd] != '.') {
                            if (i == xEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[i][yEnd])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[i][yEnd])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving vertically up
                if (xDiff > 0 && yDiff == 0) {
                    for (int i = xStart - 1; i >= xEnd; i--) {
                        if (board[i][yEnd] != '.') {
                            if (i == xEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[i][yEnd])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[i][yEnd])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving horizontally right
                if (yDiff < 0 && xDiff == 0) {
                    for (int i = yStart + 1; i <= yEnd; i++) {
                        if (board[xEnd][i] != '.') {
                            if (i == yEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[xEnd][i])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[xEnd][i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving horizontally left
                if (yDiff > 0 && xDiff == 0) {
                    for (int i = yStart - 1; i >= yEnd; i--) {
                        if (board[xEnd][i] != '.') {
                            if (i == yEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[xEnd][i])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[xEnd][i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally down and to the right
                if (xDiff < 0 && yDiff < 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart + i][yStart + i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart + i][yStart + i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart + i][yStart + i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally down and to the left
                if (xDiff < 0 && yDiff > 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart + i][yStart - i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart + i][yStart - i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart + i][yStart - i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally up and to the right
                if (xDiff > 0 && yDiff < 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart - i][yStart + i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart - i][yStart + i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart - i][yStart + i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally up and to the left
                if (xDiff > 0 && yDiff > 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart - i][yStart - i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart - i][yStart - i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart - i][yStart - i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }
                break;

            //rooks
            case 'r':case 'R':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;
                if (xDiff != 0 && yDiff != 0)
                    return false;

                //for moving vertically down
                if (xDiff < 0) {
                    for (int i = xStart + 1; i <= xEnd; i++) {
                        if (board[i][yEnd] != '.') {
                            if (i == xEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[i][yEnd])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[i][yEnd])) {
                                    return false;
                                }
                            }
                        }
                    }
                    if (xStart == 7 && yStart == 0 && isWhiteTurn)
                        a1RookMoved = true;
                    if (xStart == 7 && yStart == 7 && isWhiteTurn)
                        h1RookMoved = true;
                    if (xStart == 0 && yStart == 0 && !isWhiteTurn)
                        a8RookMoved = true;
                    if (xStart == 0 && yStart == 7 && !isWhiteTurn)
                        h8RookMoved = true;
                    return true;
                }

                //for moving vertically up
                if (xDiff > 0) {
                    for (int i = xStart - 1; i >= xEnd; i--) {
                        if (board[i][yEnd] != '.') {
                            if (i == xEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[i][yEnd])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[i][yEnd])) {
                                    return false;
                                }
                            }
                        }
                    }
                    if (xStart == 7 && yStart == 0 && isWhiteTurn)
                        a1RookMoved = true;
                    if (xStart == 7 && yStart == 7 && isWhiteTurn)
                        h1RookMoved = true;
                    if (xStart == 0 && yStart == 0 && !isWhiteTurn)
                        a8RookMoved = true;
                    if (xStart == 0 && yStart == 7 && !isWhiteTurn)
                        h8RookMoved = true;
                    return true;
                }

                //for moving horizontally right
                if (yDiff < 0) {
                    for (int i = yStart + 1; i <= yEnd; i++) {
                        if (board[xEnd][i] != '.') {
                            if (i == yEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[xEnd][i])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[xEnd][i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    if (xStart == 7 && yStart == 0 && isWhiteTurn)
                        a1RookMoved = true;
                    if (xStart == 7 && yStart == 7 && isWhiteTurn)
                        h1RookMoved = true;
                    if (xStart == 0 && yStart == 0 && !isWhiteTurn)
                        a8RookMoved = true;
                    if (xStart == 0 && yStart == 7 && !isWhiteTurn)
                        h8RookMoved = true;
                    return true;
                }

                //for moving horizontally left
                if (yDiff > 0) {
                    for (int i = yStart - 1; i >= yEnd; i--) {
                        if (board[xEnd][i] != '.') {
                            if (i == yEnd) {
                                if (isWhiteTurn && Character.isUpperCase(board[xEnd][i])) {
                                    return false;
                                }
                                else if (!isWhiteTurn && Character.isLowerCase(board[xEnd][i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    if (xStart == 7 && yStart == 0 && isWhiteTurn)
                        a1RookMoved = true;
                    if (xStart == 7 && yStart == 7 && isWhiteTurn)
                        h1RookMoved = true;
                    if (xStart == 0 && yStart == 0 && !isWhiteTurn)
                        a8RookMoved = true;
                    if (xStart == 0 && yStart == 7 && !isWhiteTurn)
                        h8RookMoved = true;
                    return true;
                }
                break;

            //bishops
            case 'b':case 'B':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;

                if (Math.abs(xDiff) != Math.abs(yDiff))
                    return false;

                //for moving diagonally down and to the right
                if (xDiff < 0 && yDiff < 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart + i][yStart + i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart + i][yStart + i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart + i][yStart + i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally down and to the left
                if (xDiff < 0 && yDiff > 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart + i][yStart - i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart + i][yStart - i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart + i][yStart - i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally up and to the right
                if (xDiff > 0 && yDiff < 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart - i][yStart + i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart - i][yStart + i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart - i][yStart + i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

                //for moving diagonally up and to the left
                if (xDiff > 0 && yDiff > 0) {
                    for (int i = 1; i <= xDiff; i++) {
                        if (board[xStart - i][yStart - i] != '.') {
                            if (i == xDiff) {
                                if (isWhiteTurn && Character.isUpperCase(board[xStart - i][yStart - i])) {
                                    return false;
                                } else if (!isWhiteTurn && Character.isLowerCase(board[xStart - i][yStart - i])) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }
                break;

            //knights
            case 'n':case 'N':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;
                if ((Math.abs(xDiff) == 2 && Math.abs(yDiff) == 1) || (Math.abs(xDiff) == 1 && Math.abs(yDiff) == 2)) {
                    if (isWhiteTurn) {
                        return (!Character.isLetter(board[xEnd][yEnd]) || Character.isLowerCase(board[xEnd][yEnd]));
                    }
                    else {
                        return (!Character.isLetter(board[xEnd][yEnd]) || Character.isUpperCase(board[xEnd][yEnd]));
                    }
                }
                else {
                    return false;
                }

                //white pawns
            case 'P':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;
                if (yDiff == 0 && xDiff == 1 && board[xEnd][yEnd] == '.') {
                    return true;
                }
                else if (yDiff == 0 && xDiff == 2 && xStart == 6 && board[xEnd][yEnd] == '.' && board[xEnd + 1][yEnd] == '.') {
                    return true;
                }
                else if (Math.abs(yDiff) == 1 && xDiff == 1 && Character.isLowerCase(board[xEnd][yEnd])) {
                    return true;
                }
                else {
                    //add en passant later - will probably need to check what last move was
                    return false;
                }

                //black pawns
            case 'p':
                xDiff = xStart - xEnd;
                yDiff = yStart - yEnd;
                if (yDiff == 0 && xDiff == -1 && board[xEnd][yEnd] == '.') {
                    return true;
                }
                else if (yDiff == 0 && xDiff == -2 && xStart == 1 && board[xEnd][yEnd] == '.' && board[xEnd -
                        1][yEnd] == '.') {
                    return true;
                }
                else if (Math.abs(yDiff) == 1 && xDiff == -1 && Character.isUpperCase(board[xEnd][yEnd])) {
                    return true;
                }
                else {
                    //add en passant later - will probably need to check what last move was
                    return false;
                }
            default:
                return false;
        }
        return false;
    }

    public int[] getKing() {
        if (isWhiteTurn) {
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (board[i][j] == 'K') {
                        int[] ret = {i, j};
                        return ret;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (board[i][j] == 'k') {
                        int[] ret = {i, j};
                        return ret;
                    }
                }
            }
        }
        int[] ret = {-1, -1};
        return ret;
    }

    public boolean isInCheck(int x, int y) {
        if (isWhiteTurn) {
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (Character.isLowerCase(board[i][j]) && isValidMove(i, j, x, y, board[i][j])) {
                        return true;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (Character.isUpperCase(board[i][j]) && isValidMove(i, j, x, y, board[i][j])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public void movePiece(int xStart, int yStart, int xEnd, int yEnd, char piece) {
        board[xStart][yStart] = '.';
        board[xEnd][yEnd] = piece;
        if (xStart == 7 && yStart == 4 && yEnd == 6 && piece == 'K') {
            board[7][7] = '.';
            board[7][5] = 'R';
        }
        if (xStart == 7 && yStart == 4 && yEnd == 2 && piece == 'K') {
            board[7][0] = '.';
            board[7][3] = 'R';
        }
        if (xStart == 0 && yStart == 4 && yEnd == 6 && piece == 'k') {
            board[0][7] = '.';
            board[0][5] = 'r';
        }
        if (xStart == 0 && yStart == 4 && yEnd == 2 && piece == 'k') {
            board[0][0] = '.';
            board[0][3] = 'r';
        }
    }

    public void promotion() {
        Scanner in = new Scanner(System.in);
        boolean getOut = false;
        if (isWhiteTurn) {
            for (int i = 0; i < 8; i++) {
                if (board[0][i] == 'P') {
                    while (!getOut) {
                        System.out.println("Promote to what piece? (Q, R, B, N)");
                        String input = in.nextLine();
                        if (input == null || input.length() != 1)
                            System.out.println("Improper input.");
                        else {
                            input = input.toUpperCase();
                            if (!input.equals("Q") || !input.equals("R") || !input.equals("B") || !input.equals("N"))
                                System.out.println("Improper input.");
                            else {
                                getOut = true;
                                switch (input) {
                                    case "Q":
                                        board[0][i] = 'Q';
                                        break;
                                    case "R":
                                        board[0][i] = 'R';
                                        break;
                                    case "B":
                                        board[0][i] = 'B';
                                        break;
                                    case "N":
                                        board[0][i] = 'N';
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            for (int i = 0; i < 8; i++) {
                if (board[7][i] == 'p') {
                    while (!getOut) {
                        System.out.println("Promote to what piece? (q, r, b, n)");
                        String input = in.nextLine();
                        if (input == null || input.length() != 1)
                            System.out.println("Improper input.");
                        else {
                            input = input.toUpperCase();
                            if (!input.equals("Q") || !input.equals("R") || !input.equals("B") || !input.equals("N"))
                                System.out.println("Improper input.");
                            else {
                                getOut = true;
                                switch (input) {
                                    case "Q":
                                        board[7][i] = 'q';
                                        break;
                                    case "R":
                                        board[7][i] = 'r';
                                        break;
                                    case "B":
                                        board[7][i] = 'b';
                                        break;
                                    case "N":
                                        board[7][i] = 'n';
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
